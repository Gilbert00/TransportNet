Сортировка MG не нужна ?
Выделение случая ind == 0 не нужно.
Порядки по xi в M(G),M(X),Q(X) одинаковы! 

(это можно сделать за один проход, так как массив $R$ и список связей упорядочены одинаково):
(2**iPrev)-1<listLimits[curr][0]<2**(iPrev+1)

Input file:
*.csv
For all edjes (x,y):
<x.vertex>,<y.vertex>[,<y.vertex>...<y.vertex>]

listX[]
listY[]

MG[x][y] <0 | 1>
MG -> MGbit[listX[indX_old]: y_bit] -> MGdec[listX[indX_old]: y_dec,indX_old] -> sort on y_dec -> MGdec[indX: y_dec,indX_old] -> 
listX[indX: listX[indX_old]] 
graph -> matrG -> npQX -> binMG -> listR
matrG[x][y]
npQX[kx][kx]
binMG[(bitY,kxOld)]
edge[[vertex, vertexIndxInLimit]]
connection (xbit, ybit)
xPrevConnections[(xbit, ybit)]
xPrevLimitList[(xbit, ybit)]
listLimits[(xbit, ybit)]
listR[(xbit, ybit)]
lXsort[[val, oldInd]]
lYsort[[val, oldInd]]

Graph.input() #+
MG.create(Graph)	#+ MG[x][y] <0 | 1>
MG.sort_by_GammaX() #+ by GammaX
MX.create(MG)	#+ = M(G) × M_T(G)
QX.create(MX) #+ All X in QX with common GammaX are cluster (?)
Limitation:=(XArrBits,YArrBits)
rLimitList := List of Limitation	#listR
EMPTY_EL=-1
EMPTY_TURTLE=(EMPTY_EL,EMPTY_EL)

for x,ind in QX:
	
	if ind == 0:
		rLimitList.add_x_connection(x,binMG)
		continue
	else:
		xPrevConnections = get_sorted_prev_connections(x,QX,binMG)
		xPrevLimitList = rLimitList.get_limits(xPrevConnections)
		
		rLimitList.add_x_connection(x,binMG)
		
		xPrevLimitList.add_xy_bits(x,binMG)
		rLimitList.add(PrevxLimitList)
			#rLimitList.check_previous_Y(x,MG)

rLimitList.output()
----
Graph.input()
dual = False
build_net_limits(dual,graph)
Graph2=Graph.make_dual()
dual = True
build_net_limits(dual,graph_dual)

-----------------
int2BinStr
print_list_xy
	int2BinStr
graph_input
check_list
gen_edjes
	check_list
sort_y_matrG
xbit
np.dot
np.minimum
get_x_connection
get_sorted_prev_connections
get_prev_connected_limits
add_xy_bits_to_prev
check_dupl_y_in_prev
check_prev_y_in_limits
create_limits
	get_x_connection
		xbit
	get_sorted_prev_connections
	get_prev_connected_limits
		print_list_xy
	get_x_connection
	add_xy_bits_to_prev
		xbit
		print_list_xy
	check_dupl_y_in_prev
		print_list_xy
	check_prev_y_in_limits
		print_list_xy
	print_list_xy
str_to_limit_side
print_limits
	str_to_limit_side
make_graph_dual	
build_net_limits
	gen_edjes
	sort_y_matrG
	np.dot
	np.minimum
	create_limits
	print_limits
------------------------
Objects:
Graph
        self.dual:logical = False
        self.lX:list = []
        self.lY:list = []
        self.nX = 0
        self.nY = 0
        self.gr:dict = dict()
Limits
	print_limits(graph)		

---------------------------
buildconstrains.BuildConstrains
graph304.csv 1 0
D:\Develop0\TestTeX\TransportNet
----------------------------
buildconstrains.FullNet
3 4
----------------------------
buildconstrains.MaxLimits
2 3
----------------------------
buildconstrains.RandomNets
4 10

------------------------
0
C:\Users\User\PycharmProjects\TransportNet\venv\Scripts\python.exe D:\TransportNet\BuildConstrains.py graph0.csv 0 
21-07-2024_21:32
['D:\\TransportNet\\BuildConstrains.py', 'graph0.csv', '0']
graph0.csv
mode: 0
graph: {'1': ['1'], '2': ['2'], '3': ['3'], '4': ['4']}
listR: [(1, 1), (2, 2), (4, 4), (8, 8)]
      [('1', '1'), ('10', '10'), ('100', '100'), ('1000', '1000')]
a1 <= b1
a2 <= b2
a3 <= b3
a4 <= b4
graph_dual: {'1': ['1'], '2': ['2'], '3': ['3'], '4': ['4']}
listR: [(1, 1), (2, 2), (4, 4), (8, 8)]
      [('1', '1'), ('10', '10'), ('100', '100'), ('1000', '1000')]
b1 <= a1
b2 <= a2
b3 <= a3
b4 <= a4

Process finished with exit code 0
--
C:\Users\User\PycharmProjects\TransportNet\venv\Scripts\python.exe D:\TransportNet\BuildConstrains.py graph0.csv 0 
23-07-2024_10:54
['D:\\TransportNet\\BuildConstrains.py', 'graph0.csv', '0']
graph0.csv
mode: 0
graph: {'1': ['1'], '2': ['2'], '3': ['3'], '4': ['4']}
listR: [(1, 1), (2, 2), (4, 4), (8, 8)]
      [('1', '1'), ('10', '10'), ('100', '100'), ('1000', '1000')]
a1 <= b1
a2 <= b2
a3 <= b3
a4 <= b4
graph_dual: {'1': ['1'], '2': ['2'], '3': ['3'], '4': ['4']}
listR: [(1, 1), (2, 2), (4, 4), (8, 8)]
      [('1', '1'), ('10', '10'), ('100', '100'), ('1000', '1000')]
b1 <= a1
b2 <= a2
b3 <= a3
b4 <= a4

Process finished with exit code 0

--------------------------------
11
C:\Users\User\PycharmProjects\TransportNet\venv\Scripts\python.exe D:\TransportNet\BuildConstrains.py graph11.csv 0 
21-07-2024_21:33
['D:\\TransportNet\\BuildConstrains.py', 'graph11.csv', '0']
graph11.csv
mode: 0
graph: {'4': ['1', '2', '3', '4'], '1': ['1'], '3': ['1', '2', '3'], '2': ['1', '2']}
listR: [(2, 1), (10, 3), (14, 7), (15, 15)]
      [('10', '1'), ('1010', '11'), ('1110', '111'), ('1111', '1111')]
a1 <= b1
a1 + a2 <= b1 + b2
a1 + a2 + a3 <= b1 + b2 + b3
a1 + a2 + a3 + a4 <= b1 + b2 + b3 + b4
graph_dual: {'1': ['1', '2', '3', '4'], '2': ['2', '3', '4'], '3': ['3', '4'], '4': ['4']}
listR: [(8, 8), (12, 12), (14, 14), (15, 15)]
      [('1000', '1000'), ('1100', '1100'), ('1110', '1110'), ('1111', '1111')]
b4 <= a4
b3 + b4 <= a3 + a4
b2 + b3 + b4 <= a2 + a3 + a4
b1 + b2 + b3 + b4 <= a1 + a2 + a3 + a4

Process finished with exit code 0
--
C:\Users\User\PycharmProjects\TransportNet\venv\Scripts\python.exe D:\TransportNet\BuildConstrains.py graph11.csv 0 
23-07-2024_11:18
['D:\\TransportNet\\BuildConstrains.py', 'graph11.csv', '0']
graph11.csv
mode: 0
graph: {'4': ['1', '2', '3', '4'], '1': ['1'], '3': ['1', '2', '3'], '2': ['1', '2']}
listR: [(2, 1), (10, 3), (14, 7), (15, 15)]
      [('10', '1'), ('1010', '11'), ('1110', '111'), ('1111', '1111')]
a1 <= b1
a1 + a2 <= b1 + b2
a1 + a2 + a3 <= b1 + b2 + b3
a1 + a2 + a3 + a4 <= b1 + b2 + b3 + b4
graph_dual: {'1': ['1', '2', '3', '4'], '2': ['2', '3', '4'], '3': ['3', '4'], '4': ['4']}
listR: [(8, 8), (12, 12), (14, 14), (15, 15)]
      [('1000', '1000'), ('1100', '1100'), ('1110', '1110'), ('1111', '1111')]
b4 <= a4
b3 + b4 <= a3 + a4
b2 + b3 + b4 <= a2 + a3 + a4
b1 + b2 + b3 + b4 <= a1 + a2 + a3 + a4

Process finished with exit code 0
--
C:\Users\User\PycharmProjects\TransportNet\venv\Scripts\python.exe D:\TransportNet\BuildConstrains.py graph11.csv 0 
13-08-2024_21:09
['D:\\TransportNet\\BuildConstrains.py', 'graph11.csv', '0']
graph11.csv
mode: 0
graph: {'4': ['1', '2', '3', '4'], '1': ['1'], '3': ['1', '2', '3'], '2': ['1', '2']}
npQX: [[1 1 1 1]
 [1 1 1 1]
 [1 1 1 1]
 [1 1 1 1]]
 after sort_matrG_by_x
matrG: [[1, 1, 1, 1], [1, 0, 0, 0], [1, 1, 1, 0], [1, 1, 0, 0]]
lX: 4 ['4', '1', '3', '2']
binMG: [(15, 0), (1, 1), (7, 2), (3, 3)]
npQX: [[1 1 1 1]
 [1 1 1 1]
 [1 1 1 1]
 [1 1 1 1]]
indQX: 0
 indx,x,y current: 0 1 1111
after append listLimits: [(1, 15)]
                        [('1', '1111')]
indQX: 1
 get_sorted_prev_connections
 indx,x,y current: 0 1 1111
indx,prev_connections 1 [(1, 15)]
 get_prev_connected_limits
prev_limits: [(1, 15)]
            [('1', '1111')]
 indx,x,y current: 1 10 1
after append listLimits: [(1, 15), (2, 1)]
                        [('1', '1111'), ('10', '1')]
 add_xy_bits_to_prev
xPrevLimitList-s: [(1, 15)]
                 [('1', '1111')]
 indx,x,y current: 1 10 1
indx,x,y: 1 10 1
xPrevLimitList-f: [(3, 15)]
                 [('11', '1111')]
 check_dupl_y_in_prev
xPrevLimitList-s: [(3, 15)]
                 [('11', '1111')]
xPrevLimitList-e: [(3, 15)]
                 [('11', '1111')]
xPrevLimitList-f: [(3, 15)]
                 [('11', '1111')]
 check_prev_y_in_limits
xPrevLimitList: [(3, 15)]
               [('11', '1111')]
listLimits-s: [(1, 15), (2, 1)]
             [('1', '1111'), ('10', '1')]
listLimits-e: [(0, 0), (2, 1)]
             [('0', '0'), ('10', '1')]
listLimits-f: [(2, 1)]
             [('10', '1')]
after extend listLimits: [(2, 1), (3, 15)]
                        [('10', '1'), ('11', '1111')]
indQX: 2
 get_sorted_prev_connections
 indx,x,y current: 0 1 1111
 indx,x,y current: 1 10 1
indx,prev_connections 2 [(1, 15), (2, 1)]
 get_prev_connected_limits
prev_limits: [(3, 15), (2, 1), (3, 15)]
            [('11', '1111'), ('10', '1'), ('11', '1111')]
 indx,x,y current: 2 100 111
after append listLimits: [(2, 1), (3, 15), (4, 7)]
                        [('10', '1'), ('11', '1111'), ('100', '111')]
 add_xy_bits_to_prev
xPrevLimitList-s: [(3, 15), (2, 1), (3, 15)]
                 [('11', '1111'), ('10', '1'), ('11', '1111')]
 indx,x,y current: 2 100 111
indx,x,y: 2 100 111
xPrevLimitList-f: [(7, 15), (6, 7), (7, 15)]
                 [('111', '1111'), ('110', '111'), ('111', '1111')]
 check_dupl_y_in_prev
xPrevLimitList-s: [(7, 15), (6, 7), (7, 15)]
                 [('111', '1111'), ('110', '111'), ('111', '1111')]
xPrevLimitList-e: [(0, 0), (6, 7), (7, 15)]
                 [('0', '0'), ('110', '111'), ('111', '1111')]
xPrevLimitList-f: [(6, 7), (7, 15)]
                 [('110', '111'), ('111', '1111')]
 check_prev_y_in_limits
xPrevLimitList: [(6, 7), (7, 15)]
               [('110', '111'), ('111', '1111')]
listLimits-s: [(2, 1), (3, 15), (4, 7)]
             [('10', '1'), ('11', '1111'), ('100', '111')]
listLimits-e: [(2, 1), (0, 0), (0, 0)]
             [('10', '1'), ('0', '0'), ('0', '0')]
listLimits-f: [(2, 1)]
             [('10', '1')]
after extend listLimits: [(2, 1), (6, 7), (7, 15)]
                        [('10', '1'), ('110', '111'), ('111', '1111')]
indQX: 3
 get_sorted_prev_connections
 indx,x,y current: 0 1 1111
 indx,x,y current: 1 10 1
 indx,x,y current: 2 100 111
indx,prev_connections 3 [(1, 15), (2, 1), (4, 7)]
 get_prev_connected_limits
prev_limits: [(7, 15), (2, 1), (6, 7), (7, 15), (6, 7), (7, 15)]
            [('111', '1111'), ('10', '1'), ('110', '111'), ('111', '1111'), ('110', '111'), ('111', '1111')]
 indx,x,y current: 3 1000 11
after append listLimits: [(2, 1), (6, 7), (7, 15), (8, 3)]
                        [('10', '1'), ('110', '111'), ('111', '1111'), ('1000', '11')]
 add_xy_bits_to_prev
xPrevLimitList-s: [(7, 15), (2, 1), (6, 7), (7, 15), (6, 7), (7, 15)]
                 [('111', '1111'), ('10', '1'), ('110', '111'), ('111', '1111'), ('110', '111'), ('111', '1111')]
 indx,x,y current: 3 1000 11
indx,x,y: 3 1000 11
xPrevLimitList-f: [(15, 15), (10, 3), (14, 7), (15, 15), (14, 7), (15, 15)]
                 [('1111', '1111'), ('1010', '11'), ('1110', '111'), ('1111', '1111'), ('1110', '111'), ('1111', '1111')]
 check_dupl_y_in_prev
xPrevLimitList-s: [(15, 15), (10, 3), (14, 7), (15, 15), (14, 7), (15, 15)]
                 [('1111', '1111'), ('1010', '11'), ('1110', '111'), ('1111', '1111'), ('1110', '111'), ('1111', '1111')]
xPrevLimitList-e: [(0, 0), (10, 3), (0, 0), (0, 0), (14, 7), (15, 15)]
                 [('0', '0'), ('1010', '11'), ('0', '0'), ('0', '0'), ('1110', '111'), ('1111', '1111')]
xPrevLimitList-f: [(10, 3), (14, 7), (15, 15)]
                 [('1010', '11'), ('1110', '111'), ('1111', '1111')]
 check_prev_y_in_limits
xPrevLimitList: [(10, 3), (14, 7), (15, 15)]
               [('1010', '11'), ('1110', '111'), ('1111', '1111')]
listLimits-s: [(2, 1), (6, 7), (7, 15), (8, 3)]
             [('10', '1'), ('110', '111'), ('111', '1111'), ('1000', '11')]
listLimits-e: [(2, 1), (0, 0), (0, 0), (0, 0)]
             [('10', '1'), ('0', '0'), ('0', '0'), ('0', '0')]
listLimits-f: [(2, 1)]
             [('10', '1')]
after extend listLimits: [(2, 1), (10, 3), (14, 7), (15, 15)]
                        [('10', '1'), ('1010', '11'), ('1110', '111'), ('1111', '1111')]
listR: [(2, 1), (10, 3), (14, 7), (15, 15)]
      [('10', '1'), ('1010', '11'), ('1110', '111'), ('1111', '1111')]
a1 <= b1
a1 + a2 <= b1 + b2
a1 + a2 + a3 <= b1 + b2 + b3
a1 + a2 + a3 + a4 <= b1 + b2 + b3 + b4
graph_dual: {'1': ['1', '2', '3', '4'], '2': ['2', '3', '4'], '3': ['3', '4'], '4': ['4']}
npQX: [[1 1 1 1]
 [1 1 1 1]
 [1 1 1 1]
 [1 1 1 1]]
 after sort_matrG_by_x
matrG: [[1, 1, 1, 1], [0, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 1]]
lX: 4 ['1', '2', '3', '4']
binMG: [(15, 0), (14, 1), (12, 2), (8, 3)]
npQX: [[1 1 1 1]
 [1 1 1 1]
 [1 1 1 1]
 [1 1 1 1]]
indQX: 0
 indx,x,y current: 0 1 1111
after append listLimits: [(1, 15)]
                        [('1', '1111')]
indQX: 1
 get_sorted_prev_connections
 indx,x,y current: 0 1 1111
indx,prev_connections 1 [(1, 15)]
 get_prev_connected_limits
prev_limits: [(1, 15)]
            [('1', '1111')]
 indx,x,y current: 1 10 1110
after append listLimits: [(1, 15), (2, 14)]
                        [('1', '1111'), ('10', '1110')]
 add_xy_bits_to_prev
xPrevLimitList-s: [(1, 15)]
                 [('1', '1111')]
 indx,x,y current: 1 10 1110
indx,x,y: 1 10 1110
xPrevLimitList-f: [(3, 15)]
                 [('11', '1111')]
 check_dupl_y_in_prev
xPrevLimitList-s: [(3, 15)]
                 [('11', '1111')]
xPrevLimitList-e: [(3, 15)]
                 [('11', '1111')]
xPrevLimitList-f: [(3, 15)]
                 [('11', '1111')]
 check_prev_y_in_limits
xPrevLimitList: [(3, 15)]
               [('11', '1111')]
listLimits-s: [(1, 15), (2, 14)]
             [('1', '1111'), ('10', '1110')]
listLimits-e: [(0, 0), (2, 14)]
             [('0', '0'), ('10', '1110')]
listLimits-f: [(2, 14)]
             [('10', '1110')]
after extend listLimits: [(2, 14), (3, 15)]
                        [('10', '1110'), ('11', '1111')]
indQX: 2
 get_sorted_prev_connections
 indx,x,y current: 0 1 1111
 indx,x,y current: 1 10 1110
indx,prev_connections 2 [(1, 15), (2, 14)]
 get_prev_connected_limits
prev_limits: [(3, 15), (2, 14), (3, 15)]
            [('11', '1111'), ('10', '1110'), ('11', '1111')]
 indx,x,y current: 2 100 1100
after append listLimits: [(2, 14), (3, 15), (4, 12)]
                        [('10', '1110'), ('11', '1111'), ('100', '1100')]
 add_xy_bits_to_prev
xPrevLimitList-s: [(3, 15), (2, 14), (3, 15)]
                 [('11', '1111'), ('10', '1110'), ('11', '1111')]
 indx,x,y current: 2 100 1100
indx,x,y: 2 100 1100
xPrevLimitList-f: [(7, 15), (6, 14), (7, 15)]
                 [('111', '1111'), ('110', '1110'), ('111', '1111')]
 check_dupl_y_in_prev
xPrevLimitList-s: [(7, 15), (6, 14), (7, 15)]
                 [('111', '1111'), ('110', '1110'), ('111', '1111')]
xPrevLimitList-e: [(0, 0), (6, 14), (7, 15)]
                 [('0', '0'), ('110', '1110'), ('111', '1111')]
xPrevLimitList-f: [(6, 14), (7, 15)]
                 [('110', '1110'), ('111', '1111')]
 check_prev_y_in_limits
xPrevLimitList: [(6, 14), (7, 15)]
               [('110', '1110'), ('111', '1111')]
listLimits-s: [(2, 14), (3, 15), (4, 12)]
             [('10', '1110'), ('11', '1111'), ('100', '1100')]
listLimits-e: [(0, 0), (0, 0), (4, 12)]
             [('0', '0'), ('0', '0'), ('100', '1100')]
listLimits-f: [(4, 12)]
             [('100', '1100')]
after extend listLimits: [(4, 12), (6, 14), (7, 15)]
                        [('100', '1100'), ('110', '1110'), ('111', '1111')]
indQX: 3
 get_sorted_prev_connections
 indx,x,y current: 0 1 1111
 indx,x,y current: 1 10 1110
 indx,x,y current: 2 100 1100
indx,prev_connections 3 [(1, 15), (2, 14), (4, 12)]
 get_prev_connected_limits
prev_limits: [(7, 15), (6, 14), (7, 15), (4, 12), (6, 14), (7, 15)]
            [('111', '1111'), ('110', '1110'), ('111', '1111'), ('100', '1100'), ('110', '1110'), ('111', '1111')]
 indx,x,y current: 3 1000 1000
after append listLimits: [(4, 12), (6, 14), (7, 15), (8, 8)]
                        [('100', '1100'), ('110', '1110'), ('111', '1111'), ('1000', '1000')]
 add_xy_bits_to_prev
xPrevLimitList-s: [(7, 15), (6, 14), (7, 15), (4, 12), (6, 14), (7, 15)]
                 [('111', '1111'), ('110', '1110'), ('111', '1111'), ('100', '1100'), ('110', '1110'), ('111', '1111')]
 indx,x,y current: 3 1000 1000
indx,x,y: 3 1000 1000
xPrevLimitList-f: [(15, 15), (14, 14), (15, 15), (12, 12), (14, 14), (15, 15)]
                 [('1111', '1111'), ('1110', '1110'), ('1111', '1111'), ('1100', '1100'), ('1110', '1110'), ('1111', '1111')]
 check_dupl_y_in_prev
xPrevLimitList-s: [(15, 15), (14, 14), (15, 15), (12, 12), (14, 14), (15, 15)]
                 [('1111', '1111'), ('1110', '1110'), ('1111', '1111'), ('1100', '1100'), ('1110', '1110'), ('1111', '1111')]
xPrevLimitList-e: [(0, 0), (0, 0), (0, 0), (12, 12), (14, 14), (15, 15)]
                 [('0', '0'), ('0', '0'), ('0', '0'), ('1100', '1100'), ('1110', '1110'), ('1111', '1111')]
xPrevLimitList-f: [(12, 12), (14, 14), (15, 15)]
                 [('1100', '1100'), ('1110', '1110'), ('1111', '1111')]
 check_prev_y_in_limits
xPrevLimitList: [(12, 12), (14, 14), (15, 15)]
               [('1100', '1100'), ('1110', '1110'), ('1111', '1111')]
listLimits-s: [(4, 12), (6, 14), (7, 15), (8, 8)]
             [('100', '1100'), ('110', '1110'), ('111', '1111'), ('1000', '1000')]
listLimits-e: [(0, 0), (0, 0), (0, 0), (8, 8)]
             [('0', '0'), ('0', '0'), ('0', '0'), ('1000', '1000')]
listLimits-f: [(8, 8)]
             [('1000', '1000')]
after extend listLimits: [(8, 8), (12, 12), (14, 14), (15, 15)]
                        [('1000', '1000'), ('1100', '1100'), ('1110', '1110'), ('1111', '1111')]
listR: [(8, 8), (12, 12), (14, 14), (15, 15)]
      [('1000', '1000'), ('1100', '1100'), ('1110', '1110'), ('1111', '1111')]
b4 <= a4
b3 + b4 <= a3 + a4
b2 + b3 + b4 <= a2 + a3 + a4
b1 + b2 + b3 + b4 <= a1 + a2 + a3 + a4

Process finished with exit code 0
--
C:\Users\User\PycharmProjects\TransportNet\venv\Scripts\python.exe D:\TransportNet\BuildConstrains.py graph11.csv 0 
13-08-2024_21:12
['D:\\TransportNet\\BuildConstrains.py', 'graph11.csv', '0']
graph11.csv
mode: 0
graph: {'4': ['1', '2', '3', '4'], '1': ['1'], '3': ['1', '2', '3'], '2': ['1', '2']}
listR: [(2, 1), (10, 3), (14, 7), (15, 15)]
      [('10', '1'), ('1010', '11'), ('1110', '111'), ('1111', '1111')]
a1 <= b1
a1 + a2 <= b1 + b2
a1 + a2 + a3 <= b1 + b2 + b3
a1 + a2 + a3 + a4 <= b1 + b2 + b3 + b4
graph_dual: {'1': ['1', '2', '3', '4'], '2': ['2', '3', '4'], '3': ['3', '4'], '4': ['4']}
listR: [(8, 8), (12, 12), (14, 14), (15, 15)]
      [('1000', '1000'), ('1100', '1100'), ('1110', '1110'), ('1111', '1111')]
b4 <= a4
b3 + b4 <= a3 + a4
b2 + b3 + b4 <= a2 + a3 + a4
b1 + b2 + b3 + b4 <= a1 + a2 + a3 + a4

Process finished with exit code 0






-----------------------
2
C:\Users\User\PycharmProjects\TransportNet\venv\Scripts\python.exe D:\TransportNet\BuildConstrains.py graph2.csv 0 
21-07-2024_21:26
['D:\\TransportNet\\BuildConstrains.py', 'graph2.csv', '0']
graph2.csv
mode: 0
graph: {'1': ['1', '2'], '2': ['2', '3'], '3': ['3', '4'], '4': ['4', '5']}
listR: [(1, 3), (2, 6), (3, 7), (4, 12), (6, 14), (7, 15), (8, 24), (12, 28), (14, 30), (15, 31)]
      [('1', '11'), ('10', '110'), ('11', '111'), ('100', '1100'), ('110', '1110'), ('111', '1111'), ('1000', '11000'), ('1100', '11100'), ('1110', '11110'), ('1111', '11111')]
a1 <= b1 + b2
a2 <= b2 + b3
a1 + a2 <= b1 + b2 + b3
a3 <= b3 + b4
a2 + a3 <= b2 + b3 + b4
a1 + a2 + a3 <= b1 + b2 + b3 + b4
a4 <= b4 + b5
a3 + a4 <= b3 + b4 + b5
a2 + a3 + a4 <= b2 + b3 + b4 + b5
a1 + a2 + a3 + a4 <= b1 + b2 + b3 + b4 + b5
graph_dual: {'1': ['1'], '2': ['1', '2'], '3': ['2', '3'], '4': ['3', '4'], '5': ['4']}
listR: [(1, 1), (3, 3), (4, 6), (7, 7), (16, 8), (24, 12), (28, 14), (31, 15)]
      [('1', '1'), ('11', '11'), ('100', '110'), ('111', '111'), ('10000', '1000'), ('11000', '1100'), ('11100', '1110'), ('11111', '1111')]
b1 <= a1
b1 + b2 <= a1 + a2
b3 <= a2 + a3
b1 + b2 + b3 <= a1 + a2 + a3
b5 <= a4
b4 + b5 <= a3 + a4
b3 + b4 + b5 <= a2 + a3 + a4
b1 + b2 + b3 + b4 + b5 <= a1 + a2 + a3 + a4

Process finished with exit code 0
--
C:\Users\User\PycharmProjects\TransportNet\venv\Scripts\python.exe D:\TransportNet\BuildConstrains.py graph2.csv 0 
23-07-2024_10:56
['D:\\TransportNet\\BuildConstrains.py', 'graph2.csv', '0']
graph2.csv
mode: 0
graph: {'1': ['1', '2'], '2': ['2', '3'], '3': ['3', '4'], '4': ['4', '5']}
listR: [(1, 3), (2, 6), (3, 7), (4, 12), (6, 14), (7, 15), (8, 24), (12, 28), (14, 30), (15, 31)]
      [('1', '11'), ('10', '110'), ('11', '111'), ('100', '1100'), ('110', '1110'), ('111', '1111'), ('1000', '11000'), ('1100', '11100'), ('1110', '11110'), ('1111', '11111')]
a1 <= b1 + b2
a2 <= b2 + b3
a1 + a2 <= b1 + b2 + b3
a3 <= b3 + b4
a2 + a3 <= b2 + b3 + b4
a1 + a2 + a3 <= b1 + b2 + b3 + b4
a4 <= b4 + b5
a3 + a4 <= b3 + b4 + b5
a2 + a3 + a4 <= b2 + b3 + b4 + b5
a1 + a2 + a3 + a4 <= b1 + b2 + b3 + b4 + b5
graph_dual: {'1': ['1'], '2': ['1', '2'], '3': ['2', '3'], '4': ['3', '4'], '5': ['4']}
listR: [(1, 1), (3, 3), (4, 6), (7, 7), (16, 8), (24, 12), (28, 14), (31, 15)]
      [('1', '1'), ('11', '11'), ('100', '110'), ('111', '111'), ('10000', '1000'), ('11000', '1100'), ('11100', '1110'), ('11111', '1111')]
b1 <= a1
b1 + b2 <= a1 + a2
b3 <= a2 + a3
b1 + b2 + b3 <= a1 + a2 + a3
b5 <= a4
b4 + b5 <= a3 + a4
b3 + b4 + b5 <= a2 + a3 + a4
b1 + b2 + b3 + b4 + b5 <= a1 + a2 + a3 + a4

Process finished with exit code 0

------------------------
21
C:\Users\User\PycharmProjects\TransportNet\venv\Scripts\python.exe D:\TransportNet\BuildConstrains.py graph21.csv 0 
23-07-2024_11:14
['D:\\TransportNet\\BuildConstrains.py', 'graph21.csv', '0']
graph21.csv
mode: 0
graph: {'1': ['1'], '2': ['1', '2'], '3': ['2', '3'], '5': ['4'], '4': ['3', '4']}
listR: [(1, 1), (3, 3), (4, 6), (7, 7), (16, 8), (24, 12), (28, 14), (31, 15)]
      [('1', '1'), ('11', '11'), ('100', '110'), ('111', '111'), ('10000', '1000'), ('11000', '1100'), ('11100', '1110'), ('11111', '1111')]
a1 <= b1
a1 + a2 <= b1 + b2
a3 <= b2 + b3
a1 + a2 + a3 <= b1 + b2 + b3
a5 <= b4
a4 + a5 <= b3 + b4
a3 + a4 + a5 <= b2 + b3 + b4
a1 + a2 + a3 + a4 + a5 <= b1 + b2 + b3 + b4
graph_dual: {'1': ['1', '2'], '2': ['2', '3'], '3': ['3', '4'], '4': ['4', '5']}
listR: [(1, 3), (2, 6), (3, 7), (4, 12), (6, 14), (7, 15), (8, 24), (12, 28), (14, 30), (15, 31)]
      [('1', '11'), ('10', '110'), ('11', '111'), ('100', '1100'), ('110', '1110'), ('111', '1111'), ('1000', '11000'), ('1100', '11100'), ('1110', '11110'), ('1111', '11111')]
b1 <= a1 + a2
b2 <= a2 + a3
b1 + b2 <= a1 + a2 + a3
b3 <= a3 + a4
b2 + b3 <= a2 + a3 + a4
b1 + b2 + b3 <= a1 + a2 + a3 + a4
b4 <= a4 + a5
b3 + b4 <= a3 + a4 + a5
b2 + b3 + b4 <= a2 + a3 + a4 + a5
b1 + b2 + b3 + b4 <= a1 + a2 + a3 + a4 + a5

Process finished with exit code 0

------------------------
3
C:\Users\User\PycharmProjects\TransportNet\venv\Scripts\python.exe D:\TransportNet\BuildConstrains.py graph3.csv 0 
21-07-2024_21:29
['D:\\TransportNet\\BuildConstrains.py', 'graph3.csv', '0']
graph3.csv
mode: 0
graph: {'1': ['0', '1'], '2': ['0', '2'], '3': ['0', '3'], '4': ['0', '4']}
listR: [(1, 3), (2, 5), (3, 7), (4, 9), (5, 11), (6, 13), (7, 15), (8, 17), (9, 19), (10, 21), (11, 23), (12, 25), (13, 27), (14, 29), (15, 31)]
      [('1', '11'), ('10', '101'), ('11', '111'), ('100', '1001'), ('101', '1011'), ('110', '1101'), ('111', '1111'), ('1000', '10001'), ('1001', '10011'), ('1010', '10101'), ('1011', '10111'), ('1100', '11001'), ('1101', '11011'), ('1110', '11101'), ('1111', '11111')]
a1 <= b0 + b1
a2 <= b0 + b2
a1 + a2 <= b0 + b1 + b2
a3 <= b0 + b3
a1 + a3 <= b0 + b1 + b3
a2 + a3 <= b0 + b2 + b3
a1 + a2 + a3 <= b0 + b1 + b2 + b3
a4 <= b0 + b4
a1 + a4 <= b0 + b1 + b4
a2 + a4 <= b0 + b2 + b4
a1 + a2 + a4 <= b0 + b1 + b2 + b4
a3 + a4 <= b0 + b3 + b4
a1 + a3 + a4 <= b0 + b1 + b3 + b4
a2 + a3 + a4 <= b0 + b2 + b3 + b4
a1 + a2 + a3 + a4 <= b0 + b1 + b2 + b3 + b4
graph_dual: {'0': ['1', '2', '3', '4'], '1': ['1'], '2': ['2'], '3': ['3'], '4': ['4']}
listR: [(2, 1), (4, 2), (8, 4), (16, 8), (31, 15)]
      [('10', '1'), ('100', '10'), ('1000', '100'), ('10000', '1000'), ('11111', '1111')]
b1 <= a1
b2 <= a2
b3 <= a3
b4 <= a4
b0 + b1 + b2 + b3 + b4 <= a1 + a2 + a3 + a4

Process finished with exit code 0
--
C:\Users\User\PycharmProjects\TransportNet\venv\Scripts\python.exe D:\TransportNet\BuildConstrains.py graph3.csv 0 
23-07-2024_11:19
['D:\\TransportNet\\BuildConstrains.py', 'graph3.csv', '0']
graph3.csv
mode: 0
graph: {'1': ['0', '1'], '2': ['0', '2'], '3': ['0', '3'], '4': ['0', '4']}
listR: [(1, 3), (2, 5), (3, 7), (4, 9), (5, 11), (6, 13), (7, 15), (8, 17), (9, 19), (10, 21), (11, 23), (12, 25), (13, 27), (14, 29), (15, 31)]
      [('1', '11'), ('10', '101'), ('11', '111'), ('100', '1001'), ('101', '1011'), ('110', '1101'), ('111', '1111'), ('1000', '10001'), ('1001', '10011'), ('1010', '10101'), ('1011', '10111'), ('1100', '11001'), ('1101', '11011'), ('1110', '11101'), ('1111', '11111')]
a1 <= b0 + b1
a2 <= b0 + b2
a1 + a2 <= b0 + b1 + b2
a3 <= b0 + b3
a1 + a3 <= b0 + b1 + b3
a2 + a3 <= b0 + b2 + b3
a1 + a2 + a3 <= b0 + b1 + b2 + b3
a4 <= b0 + b4
a1 + a4 <= b0 + b1 + b4
a2 + a4 <= b0 + b2 + b4
a1 + a2 + a4 <= b0 + b1 + b2 + b4
a3 + a4 <= b0 + b3 + b4
a1 + a3 + a4 <= b0 + b1 + b3 + b4
a2 + a3 + a4 <= b0 + b2 + b3 + b4
a1 + a2 + a3 + a4 <= b0 + b1 + b2 + b3 + b4
graph_dual: {'0': ['1', '2', '3', '4'], '1': ['1'], '2': ['2'], '3': ['3'], '4': ['4']}
listR: [(2, 1), (4, 2), (8, 4), (16, 8), (31, 15)]
      [('10', '1'), ('100', '10'), ('1000', '100'), ('10000', '1000'), ('11111', '1111')]
b1 <= a1
b2 <= a2
b3 <= a3
b4 <= a4
b0 + b1 + b2 + b3 + b4 <= a1 + a2 + a3 + a4

Process finished with exit code 0
------------------------
4
C:\Users\User\PycharmProjects\TransportNet\venv\Scripts\python.exe D:\TransportNet\BuildConstrains.py graph4.csv 0 
21-07-2024_21:31
['D:\\TransportNet\\BuildConstrains.py', 'graph4.csv', '0']
graph4.csv
mode: 0
graph: {'1': ['1'], '2': ['1', '2'], '3': ['2']}
listR: [(1, 1), (4, 2), (7, 3)]
      [('1', '1'), ('100', '10'), ('111', '11')]
a1 <= b1
a3 <= b2
a1 + a2 + a3 <= b1 + b2
graph_dual: {'1': ['1', '2'], '2': ['2', '3']}
listR: [(1, 3), (2, 6), (3, 7)]
      [('1', '11'), ('10', '110'), ('11', '111')]
b1 <= a1 + a2
b2 <= a2 + a3
b1 + b2 <= a1 + a2 + a3

Process finished with exit code 0
--
C:\Users\User\PycharmProjects\TransportNet\venv\Scripts\python.exe D:\TransportNet\BuildConstrains.py graph4.csv 0 
23-07-2024_11:20
['D:\\TransportNet\\BuildConstrains.py', 'graph4.csv', '0']
graph4.csv
mode: 0
graph: {'1': ['1'], '2': ['1', '2'], '3': ['2']}
listR: [(1, 1), (4, 2), (7, 3)]
      [('1', '1'), ('100', '10'), ('111', '11')]
a1 <= b1
a3 <= b2
a1 + a2 + a3 <= b1 + b2
graph_dual: {'1': ['1', '2'], '2': ['2', '3']}
listR: [(1, 3), (2, 6), (3, 7)]
      [('1', '11'), ('10', '110'), ('11', '111')]
b1 <= a1 + a2
b2 <= a2 + a3
b1 + b2 <= a1 + a2 + a3

Process finished with exit code 0


------------------------
41
C:\Users\User\PycharmProjects\TransportNet\venv\Scripts\python.exe D:\TransportNet\BuildConstrains.py graph41.csv 0 
23-07-2024_13:06
['D:\\TransportNet\\BuildConstrains.py', 'graph41.csv', '0']
graph41.csv
mode: 0
graph: {'1': ['1'], '2': ['1'], '3': ['1', '2'], '4': ['2'], '5': ['3'], '6': ['3'], '7': ['3', '4'], '8': ['4']}
listR: [(3, 1), (8, 2), (15, 3), (48, 4), (128, 8), (240, 12)]
      [('11', '1'), ('1000', '10'), ('1111', '11'), ('110000', '100'), ('10000000', '1000'), ('11110000', '1100')]
a1 + a2 <= b1
a4 <= b2
a1 + a2 + a3 + a4 <= b1 + b2
a5 + a6 <= b3
a8 <= b4
a5 + a6 + a7 + a8 <= b3 + b4
graph_dual: {'1': ['1', '2', '3'], '2': ['3', '4'], '3': ['5', '6', '7'], '4': ['7', '8']}
listR: [(1, 7), (2, 12), (3, 15), (4, 112), (8, 192), (12, 240)]
      [('1', '111'), ('10', '1100'), ('11', '1111'), ('100', '1110000'), ('1000', '11000000'), ('1100', '11110000')]
b1 <= a1 + a2 + a3
b2 <= a3 + a4
b1 + b2 <= a1 + a2 + a3 + a4
b3 <= a5 + a6 + a7
b4 <= a7 + a8
b3 + b4 <= a5 + a6 + a7 + a8

Process finished with exit code 0
--
C:\Users\User\PycharmProjects\TransportNet\venv\Scripts\python.exe D:\TransportNet\BuildConstrains.py graph41.csv 0 
13-08-2024_13:59
['D:\\TransportNet\\BuildConstrains.py', 'graph41.csv', '0']
graph41.csv
mode: 0
graph: {'1': ['1'], '2': ['1'], '3': ['1', '2'], '4': ['2'], '5': ['3'], '6': ['3'], '7': ['3', '4'], '8': ['4']}
listR: [(0, 0)]
      [('11111111', '1100')]
a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 <= b3 + b4
graph_dual: {'1': ['1', '2', '3'], '2': ['3', '4'], '3': ['5', '6', '7'], '4': ['7', '8']}
listR: [(0, 0)]
      [('1111', '11110000')]
b1 + b2 + b3 + b4 <= a5 + a6 + a7 + a8

Process finished with exit code 0
---------------------------
---------------------------
19-09-2024_13:07
RandomNets.java [10, 1]
graph: {01=[01, 03, 04, 05, 06, 07, 08, 09, 10], 02=[01, 02, 03, 04, 05, 06, 07, 10], 03=[01, 02, 04, 08], 04=[01, 02, 06, 08], 05=[01, 02, 04, 06, 07, 09], 06=[01, 02, 04, 07, 09], 07=[01, 03, 05, 06, 09], 08=[01, 03, 05], 09=[01, 05, 07, 08, 10], 10=[01, 04, 05, 06, 07, 08]}
listR: [[4, 581], [8, 593], [12, 597], [32, 677], [36, 741], [48, 693], [60, 757], [128, 11], [130, 831], [132, 591], [136, 603], [140, 607], [160, 687], [164, 751], [192, 155], [200, 731], [204, 735], [240, 703], [242, 959], [256, 361], [260, 877], [264, 889], [292, 1005], [384, 363], [388, 879], [392, 891], [420, 1007], [448, 507], [456, 1019], [512, 125], [524, 637], [572, 765], [640, 127], [652, 639], [704, 255], [764, 767], [768, 381], [780, 893], [828, 1021], [896, 383], [910, 895], [961, 511], [1023, 1023]]
      [[100, 1001000101], [1000, 1001010001], [1100, 1001010101], [100000, 1010100101], [100100, 1011100101], [110000, 1010110101], [111100, 1011110101], [10000000, 1011], [10000010, 1100111111], [10000100, 1001001111], [10001000, 1001011011], [10001100, 1001011111], [10100000, 1010101111], [10100100, 1011101111], [11000000, 10011011], [11001000, 1011011011], [11001100, 1011011111], [11110000, 1010111111], [11110010, 1110111111], [100000000, 101101001], [100000100, 1101101101], [100001000, 1101111001], [100100100, 1111101101], [110000000, 101101011], [110000100, 1101101111], [110001000, 1101111011], [110100100, 1111101111], [111000000, 111111011], [111001000, 1111111011], [1000000000, 1111101], [1000001100, 1001111101], [1000111100, 1011111101], [1010000000, 1111111], [1010001100, 1001111111], [1011000000, 11111111], [1011111100, 1011111111], [1100000000, 101111101], [1100001100, 1101111101], [1100111100, 1111111101], [1110000000, 101111111], [1110001110, 1101111111], [1111000001, 111111111], [1111111111, 1111111111]]
listR len: 43
------------------------------------------------------------------------
BUILD SUCCESS
------------------------------------------------------------------------
Total time:  5.777 s
Finished at: 2024-09-19T13:07:11+03:00
------------------------------------------------------------------------
19-09-2024_13:14
RandomNets.java [10, 1]
graph: {01=[01, 03, 04, 08], 02=[01, 02, 03, 06, 07, 09, 10], 03=[01, 02, 06, 07, 08, 10], 04=[01], 05=[01, 02, 03, 04, 05, 07], 06=[01, 06, 09, 10], 07=[01, 02, 03, 04, 05, 06], 08=[01, 03, 06], 09=[01, 02, 03, 04, 05], 10=[01, 02, 06, 09, 10]}
listR: [[8, 1], [9, 15], [12, 377], [40, 417], [136, 35], [137, 47], [140, 379], [141, 383], [168, 419], [169, 431], [264, 535], [265, 543], [280, 599], [281, 607], [456, 567], [457, 575], [472, 631], [473, 639], [477, 895], [552, 433], [556, 505], [680, 435], [681, 447], [682, 499], [686, 507], [687, 511], [1000, 951], [1001, 959], [1018, 1015], [1023, 1023]]
      [[1000, 1], [1001, 1111], [1100, 101111001], [101000, 110100001], [10001000, 100011], [10001001, 101111], [10001100, 101111011], [10001101, 101111111], [10101000, 110100011], [10101001, 110101111], [100001000, 1000010111], [100001001, 1000011111], [100011000, 1001010111], [100011001, 1001011111], [111001000, 1000110111], [111001001, 1000111111], [111011000, 1001110111], [111011001, 1001111111], [111011101, 1101111111], [1000101000, 110110001], [1000101100, 111111001], [1010101000, 110110011], [1010101001, 110111111], [1010101010, 111110011], [1010101110, 111111011], [1010101111, 111111111], [1111101000, 1110110111], [1111101001, 1110111111], [1111111010, 1111110111], [1111111111, 1111111111]]
listR len: 30
------------------------------------------------------------------------
BUILD SUCCESS
------------------------------------------------------------------------
Total time:  2.289 s
Finished at: 2024-09-19T13:14:02+03:00
------------------------------------------------------------------------
CREATE TABLE if not exists R_STAT (
    len   INTEGER PRIMARY KEY,
    count INTEGER
);
CREATE TABLE if not exists GRAPH (
    i_net INTEGER,
    x     INTEGER (2),
    gx    INTEGER,
    CONSTRAINT U_IX UNIQUE (
        i_net ASC,
        x ASC
    )
);
PRAGMA foreign_keys = 1;

CREATE TABLE if not exists STATE (
    state INTEGER (2),
    i_net INTEGER
);

select i_net,x,gx
from graph
order by 1,2

--------------
1 37*1.35=49.95*.1.35=67.4325
2 186*0.35=65.1*0.35=22.785
3 84*0.65=54.6*0.65=35.49
4 36*1.65=59.4*1.65=98.01
343 2,35 0.8		223.7175:342=0.6541

-----------------
<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-nop -->
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-nop</artifactId>
    <version>1.7.36</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-api</artifactId>
    <version>1.7.36</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc -->
<dependency>
    <groupId>org.xerial</groupId>
    <artifactId>sqlite-jdbc</artifactId>
    <version>3.46.0.1</version>
</dependency>
<dependency>
    <groupId>com.codenameone</groupId>
    <artifactId>sqlite-jdbc</artifactId>
    <version>7.0.162</version>
</dependency>

------------------------
------------------------

python битовые операции
https://timeweb.cloud/tutorials/python/pobitovye-operatory-python-rukovodstvo
https://www.guru99.com/ru/python-matrix.html
https://silvertests.ru/GuideView.aspx?id=34372
https://www.nic.ru/help/sozdaem-matricu-v-python-poshagovaya-instrukciya_11756.html
https://timeweb.cloud/tutorials/python/kak-sozdat-matricu
https://numpy.org/devdocs/user/quickstart.html
https://sky.pro/wiki/python/rabota-s-matricami-v-python-rukovodstvo-dlya-nachinayushih/
https://timeweb.com/ru/community/articles/vidy-algoritmov-sortirovki-v-python
https://skillbox.ru/media/code/sortirovka-dannykh-v-python-chto-nuzhno-znat/
https://tproger.ru/translations/python-sorting
https://ru.wikipedia.org/wiki/Timsort
https://sky.pro/wiki/python/sortirovka-spiska-python-po-dvum-polyam-algoritm-i-resheniya/
https://docs.python.org/3/howto/sorting.html
https://informatics.msk.ru/mod/page/view.php?id=38327
https://proglib.io/p/slozhnost-algoritmov-i-operaciy-na-primere-python-2020-11-03
https://proproprogs.ru/python_base/python3-argument-key-dlya-sortirovki-kollekciy-po-klyuchu
https://datastart.ru/blog/read/top-10-bibliotek-python-dlya-data-science
https://codebra.ru/ru/lessons-python/hellopython/7/5
https://pythonworld.ru/osnovy/faq.html
https://pylot.me/article/28-lokalnie-i-globalnie-peremennie-v-python/
https://codechick.io/tutorials/python/global-local-nonlocal-variables
https://metanit.com/python/tutorial/2.9.php
https://docs-python.ru/standart-library/modul-csv-python/funktsija-reader-modulja-csv/
https://www.geeksforgeeks.org/reading-csv-files-in-python/
https://realpython.com/python-csv/
https://pythonworld.ru/moduli/modul-csv.html
python list операции со списками
https://pythonworld.ru/tipy-dannyx-v-python/spiski-list-funkcii-i-metody-spiskov.html
https://skillbox.ru/media/code/spiski-v-python-chto-eto-takoe-i-kak-s-nimi-rabotat/
https://pythonru.com/primery/python-spiski-primery
https://metanit.com/python/tutorial/3.1.php
https://ya.zerocoder.ru/pgt-rabota-so-spiskami-v-python-podrobnoe-rukovodstvo/
https://thecode.media/python-lists/
https://sky.pro/media/dobavlenie-elementa-v-slovar-v-python/
https://code.mu/ru/python/faq/add-dictionary-item/
https://devpractice.ru/python-lesson-9-dict/
https://networkx.org/documentation/stable/reference/introduction.html
https://networkx.org/nx-guides/
https://packaging.python.org/en/latest/tutorials/installing-packages/
https://sky.pro/wiki/python/sozdanie-mnogostrochnykh-kommentariev-v-python-analog/
https://pythoner.name/sort-list
https://proglib.io/p/kak-pravilno-sortirovat-dannye-v-pandas
https://ru.stackoverflow.com/questions/1414122/%D0%A1%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0-%D0%BC%D0%B0%D1%82%D1%80%D0%B8%D1%86%D1%8B-%D0%A0%D0%B0%D0%B7%D0%BC%D0%B5%D1%81%D1%82%D0%B8%D1%82%D1%8C-%D1%81%D1%82%D0%BE%D0%BB%D0%B1%D1%86%D1%8B-%D0%B2-%D0%BF%D0%BE%D1%80%D1%8F%D0%B4%D0%BA%D0%B5-%D1%83%D0%BC%D0%B5%D0%BD%D1%8C%D1%88%D0%B5%D0%BD%D0%B8%D1%8F-%D1%81%D1%83%D0%BC%D0%BC-%D0%B8%D1%85-%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2-%D0%B8%D1%81
http://cs.mipt.ru/advanced_python/lessons/lab16.html
https://proglib.io/p/kak-pravilno-sortirovat-dannye-v-pandas
https://skillbox.ru/media/code/vyzov-znacheniy-iz-slovarya-python/
https://tproger.ru/explain/python-dictionaries
https://pythonworld.ru/tipy-dannyx-v-python/slovari-dict-funkcii-i-metody-slovarej.html
https://pythontutor.ru/lessons/dicts/
https://www.sravni.ru/kursy/info/kak-vzyat-znachenie-iz-slovarya-python-i-ne-slomat-prilozhenie/
https://docs-python.ru/standart-library/modul-queue-python/
https://codechick.io/tutorials/python/python-thread-safe-queue
https://docs.python.org/3/library/queue.html#queue-objects
https://codeforces.com/blog/entry/78584?f0a28=2&locale=ru
https://docs-python.ru/standart-library/modul-collections-python/klass-deque-modulja-collections/
https://pythonworld.ru/moduli/modul-collections.html
https://lisiynos.github.io/s1/graph_alg_py.html
https://ru.algorithmica.org/cs/shortest-paths/bfs/
http://e-maxx.ru/algo/bfs
https://proglib.io/p/10-algoritmov-dlya-raboty-s-grafami-kotorye-dolzhen-znat-kazhdyy-koder-2022-06-17
https://dzen.ru/a/X8TLEzfe6F2Fgbme
https://neerc.ifmo.ru/wiki/index.php?title=%D0%9E%D0%B1%D1%85%D0%BE%D0%B4_%D0%B2_%D1%88%D0%B8%D1%80%D0%B8%D0%BD%D1%83
https://stackoverflow.com/questions/76994479/how-to-find-the-connected-components-of-a-networkx-graph-not-using-the-nx-conn
https://networkx.org/documentation/networkx-0.37/help.html
https://networkx.org/documentation/stable/reference/algorithms/generated/networkx.algorithms.components.connected_components.html
https://networkx.org/documentation/stable/reference/introduction.html
https://networkx.org/documentation/stable/reference/classes/index.html
https://networkx.org/documentation/stable/reference/readwrite/index.html
https://github.com/networkx/networkx
https://networkx.org/documentation/stable/reference/readwrite/index.html
https://habr.com/ru/companies/skillfactory/articles/721838/
https://habr.com/ru/articles/125898/
https://blog.skillfactory.ru/glossary/networkx/
https://bigdataschool.ru/blog/connected-components-in-directed-graph-with-networkx-in-colab.html
https://sky.pro/media/kak-proverit-sushhestvovanie-fajla-bez-ispolzovaniya-isklyuchenij-v-python/
https://pythoner.name/path-exists
